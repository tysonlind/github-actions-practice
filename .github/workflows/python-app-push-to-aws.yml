name: CI/CD Pipeline

on:
  push:
    branches: ["*"]
    tags: ["v*"]
  pull_request:
    branches: ["*"]

permissions:
  contents: read
  actions: write
    #note
jobs:
  test:
    runs-on: codebuild-github-actions-practice-${{ github.run_id }}-${{ github.run_attempt }}
    environment: test
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12", "3.13"]

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"  
          pip install build

      - name: Ruff lint
        run: ruff check .

      - name: Test with pytest and coverage
        run: |
          pytest -v \
            --junitxml=pytest-report.xml \
            --cov=file_encoder \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing | tee pytest-output.txt

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts-py${{ matrix.python-version }}
          path: |
            pytest-output.txt
            pytest-report.xml
            coverage.xml
          retention-days: 30

      - name: Build package
        run: |
          python -m build 
          ls -l dist

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheel-py${{ matrix.python-version }}
          path: dist/*.whl
          retention-days: 30

  publish:
    name: Publish wheel (Python 3.13 only)
    needs: [test]
    runs-on:
      - codebuild-github-actions-practice-${{ github.run_id }}-${{ github.run_attempt }}
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      S3_BUCKET: is3600-homework-bucket
      S3_PREFIX: wheels/
      CODEART_DOMAIN: lindalytics
      CODEART_REPO: codeart
      CODEART_REGION: ${{ vars.AWS_REGION }}

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: pip

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine awscli

      - name: Build wheel
        run: |
          python -m build --wheel
          ls -l dist

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Upload wheel to S3
        run: |
          set -e
          WHEEL_PATH="$(ls dist/*.whl | head -n 1)"
          aws s3 cp "$WHEEL_PATH" "s3://${S3_BUCKET}/${S3_PREFIX}"

      - name: Publish to CodeArtifact
        env:
          CODEART_REGION: ${{ vars.CODEART_REGION }}
        run: |
          set -e

          #adding comment to make a change

          ENDPOINT=$(aws codeartifact get-repository-endpoint \
            --domain "${CODEART_DOMAIN}" \
            --repository "${CODEART_REPO}" \
            --format pypi \
            --region "${CODEART_REGION}" \
            --query repositoryEndpoint --output text)

          TOKEN=$(aws codeartifact get-authorization-token \
            --domain "${CODEART_DOMAIN}" \
            --region "${CODEART_REGION}" \
            --query authorizationToken --output text)

          ls -l dist/*.whl

          WHEEL_FILE=$(ls dist/*.whl | head -n 1)
          BASE=$(basename "$WHEEL_FILE")
          PKG_NAME="${BASE%%-*}"      
          REST="${BASE#${PKG_NAME}-}"            
          PKG_VER="${REST%%-*}"                  
          
          export WHEEL_FILE PKG_NAME PKG_VER

          aws codeartifact delete-package-versions \
            --domain "${CODEART_DOMAIN}" \
            --repository "${CODEART_REPO}" \
            --format pypi \
            --package "${PKG_NAME}" \
            --versions "${PKG_VER}" \
            --region "${CODEART_REGION}" || true

          twine upload --non-interactive \
            --repository-url "${ENDPOINT}" \
            -u aws -p "${TOKEN}" dist/*.whl

